class Solution {
    public int[] findOrder(int num, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[num];
        for (int i = 0; i < num; i++) {
            graph[i] = new ArrayList<>();
        }

        int[] indegree = new int[num];
        for (int i = 0; i < prerequisites.length; i++) {
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            graph[u].add(v);
            indegree[v]++;
        }

        int count = 0;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
       int k=0;
       int[] ans =new int[num];
        while (q.size()>0) {
            int rem = q.poll();
            ans[k]=rem;
            k++;
            count++;
            for (int neb: graph[rem]) {
                indegree[neb]--;
                if (indegree[neb] == 0) {
                    q.add(neb);
                }
            }
        }

        if (count == num) {
            return ans;
        }
        return new int[0];
    }
}
